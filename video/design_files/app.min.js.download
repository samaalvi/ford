;(function(win, doc) {
	'use strict';

	// setup general namespace
	var ns = 'FD.Common';
	if(getNameValue(ns + '.namespace')) {
		return;
	}
	var common = createNamespace(ns);
	// add general app functions
	common.namespace = createNamespace;
	common.nameValue = getNameValue;
	common.assign = assign;
	common.ready = domReady;
	common.objectForEach = objectForEach;
	common.allowScript = allowScript;
	common.hookReload = hookReload;
	common.debounce = debounce;

	//////

	/**
	 * Create hierarchy of namespaced objects from root object
	 * @param name
	 * @param root
	 * @param separator
	 * @returns {*}
	 */
	function createNamespace(name, root, separator) {
		var ns = root || win;
		(name || '').split(separator || '.').forEach(function(v) {
			if(v.length > 0) {
				ns = ns[v] = ns[v] || {};
			}
		});
		return ns;
	}

	/**
	 * Return value of name path from root if exists, undefined is returned otherwise
	 * @param name
	 * @param root
	 * @param separator
	 * @returns {*}
	 */
	function getNameValue(name, root, separator) {
		var val = root || win;
		var names = (name || '').split(separator || '.');
		for(var i = 0; i < names.length; i++) {
			var nm = names[i];
			if(nm in val) {
				val = val[nm];
			} else {
				return undefined;
			}
		}
		return val;
	}

    /**
     * Assign properties for each argument to target
     * @param target
     * @param varArgs
     * @returns {any}
     */
	function assign(target, varArgs) {
		if (target == null) {
			throw new TypeError('Cannot convert undefined or null to object');
		}
		var targetObj = Object(target);
		for (var idx = 1; idx < arguments.length; idx++) {
			var sourceObj = arguments[idx];
			if (sourceObj != null) {
				for (var key in sourceObj) {
					if (Object.prototype.hasOwnProperty.call(sourceObj, key)) {
						targetObj[key] = sourceObj[key];
					}
				}
			}
		}
		return targetObj;
	}

    /**
     * Call function when DOM is loaded
     * @param f
     */
	function domReady(f) {
		var ready = function() {
			doc.removeEventListener("DOMContentLoaded", ready);
			f();
		};
		doc.addEventListener("DOMContentLoaded", ready);
		if(doc.readyState === 'interactive' || doc.readyState === 'complete') {
			ready();
		}
	}

    /**
     * Call function for each property in object
     * @param obj
     * @param f
     */
	function objectForEach(obj, f) {
		for(var k in obj) {
			if(!obj.hasOwnProperty(k)) continue;
			f(obj[k], k, obj);
		}
	}

	/**
	 * Check OneTrust cookie to see if consent has been given for script category
	 * @param category
	 * @returns {boolean}
	 */
	function allowScript(category) {
		var allow = true;
		var consentCookieMatch = document.cookie.match(/(^|;)\s*OptanonConsent\s*=\s*([^;]+)/);
		if(consentCookieMatch) {
			var groups = consentCookieMatch.pop().match(/(^|&)groups=([^&]+)/);
			if(groups) {
				allow = decodeURIComponent(groups.pop()).split(',').indexOf(category + ':0') < 0;
			}
		}
		return allow;
	}

	/**
	 * To be called by SPC applications to intercept click events to detect update of user's consent preferences on OneTrust form
	 * If click is detected &  consent is not given, page is reloaded
	 */
	function hookReload() {
		document.addEventListener('click', function(ev) {
			// check for clicks on OneTrust preference form save button
			if(ev.target &&
				ev.target.classList.contains('save-preference-btn-handler')
			) {
				// add timeout to allow for update of cookie
				window.setTimeout(function() {
					// if consent is not given, reload page
					if(!allowScript('6')) {
						window.location.reload();
					}
				}, 1000);
			}
		});
	}

	/**
	 * Debounce calls to given function
	 * i.e. function is only called after no other calls are made after given wait period
	 * @param fn to debounce
	 * @param period in ms
	 * @returns {function(): void}
	 */
	function debounce(fn, period) {
		let timeout = null;
		return function() {
			let ctx = this;
			let args = arguments;
			clearTimeout(timeout);
			timeout = setTimeout(function() {
				timeout = null;
				fn.apply(ctx, args);
			}, period);
		};
	}

})(window, document);